{
  "version": 3,
  "sources": ["scripts/helpers.ts", "scripts/lightColorsNull.ts", "pack.ts"],
  "sourcesContent": ["import type {} from \"./iris\";\n\nexport class Flipper<T> {\n    a: T;\n    b: T;\n    flipped: boolean;\n\n    constructor(a: T, b: T) {\n        this.a = a;\n        this.b = b;\n        this.flipped = false;\n    }\n\n    flip() {\n        this.flipped = !this.flipped;\n    }\n\n    front() {\n        return this.flipped ? this.b : this.a;\n    }\n\n    back() {\n        return this.flipped ? this.a : this.b;\n    }\n}\n\nexport function defineGloballyIf(key: string, value: string | number, condition: boolean) {\n    if (condition) {\n        defineGlobally(key, value);\n    }\n}\n", "import type {} from \"./iris\";\n\n/*\n * Block light colours from Null's point shadow sample pack\n * https://github.com/Null-MC/PointShadowSample\n */\n\nfunction hexToRgb(hex: string) {\n    const bigint = parseInt(hex.substring(1), 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n    return { r, g, b };\n}\n\nfunction setLightColorEx(hex: string, ...blocks: string[]) {\n    const color = hexToRgb(hex);\n    blocks.forEach((block) =>\n        setLightColor(new NamespacedId(block), color.r, color.g, color.b, 255)\n    );\n}\n\nexport function configureLightColors() {\n    setLightColorEx(\"#362b21\", \"brown_mushroom\");\n    setLightColorEx(\"#f39849\", \"campfire\");\n    setLightColorEx(\"#935b2c\", \"cave_vines\", \"cave_vines_plant\");\n    setLightColorEx(\"#d39f6d\", \"copper_bulb\", \"waxed_copper_bulb\");\n    setLightColorEx(\"#d39255\", \"exposed_copper_bulb\", \"waxed_exposed_copper_bulb\");\n    setLightColorEx(\"#cf833a\", \"weathered_copper_bulb\", \"waxed_weathered_copper_bulb\");\n    setLightColorEx(\"#87480b\", \"oxidized_copper_bulb\", \"waxed_oxidized_copper_bulb\");\n    setLightColorEx(\"#7f17a8\", \"crying_obsidian\", \"respawn_anchor\");\n    setLightColorEx(\"#371559\", \"enchanting_table\");\n    setLightColorEx(\"#bea935\", \"firefly_bush\");\n    setLightColorEx(\"#5f9889\", \"glow_lichen\");\n    setLightColorEx(\"#d3b178\", \"glowstone\");\n    setLightColorEx(\"#c2985a\", \"jack_o_lantern\");\n    setLightColorEx(\"#f39e49\", \"lantern\");\n    setLightColorEx(\"#b8491c\", \"lava\", \"magma_block\");\n    setLightColorEx(\"#650a5e\", \"nether_portal\");\n    setLightColorEx(\"#dfac47\", \"ochre_froglight\");\n    setLightColorEx(\"#e075e8\", \"pearlescent_froglight\");\n    setLightColorEx(\"#f9321c\", \"redstone_torch\", \"redstone_wall_torch\");\n    setLightColorEx(\"#e0ba42\", \"redstone_lamp\");\n    setLightColorEx(\"#f9321c\", \"redstone_ore\", \"deepslate_redstone_ore\");\n    setLightColorEx(\"#8bdff8\", \"sea_lantern\");\n    setLightColorEx(\"#918f34\", \"shroomlight\");\n    setLightColorEx(\"#28aaeb\", \"soul_torch\", \"soul_wall_torch\", \"soul_campfire\");\n    setLightColorEx(\"#f3b549\", \"torch\", \"wall_torch\");\n    setLightColorEx(\"#6e0000\", \"vault\");\n    setLightColorEx(\"#63e53c\", \"verdant_froglight\");\n\n    setLightColorEx(\"#322638\", \"tinted_glass\");\n    setLightColorEx(\"#ffffff\", \"white_stained_glass\", \"white_stained_glass_pane\");\n    setLightColorEx(\"#999999\", \"light_gray_stained_glass\", \"light_gray_stained_glass_pane\");\n    setLightColorEx(\"#4c4c4c\", \"gray_stained_glass\", \"gray_stained_glass_pane\");\n    setLightColorEx(\"#191919\", \"black_stained_glass\", \"black_stained_glass_pane\");\n    setLightColorEx(\"#664c33\", \"brown_stained_glass\", \"brown_stained_glass_pane\");\n    setLightColorEx(\"#993333\", \"red_stained_glass\", \"red_stained_glass_pane\");\n    setLightColorEx(\"#d87f33\", \"orange_stained_glass\", \"orange_stained_glass_pane\");\n    setLightColorEx(\"#e5e533\", \"yellow_stained_glass\", \"yellow_stained_glass_pane\");\n\n    setLightColorEx(\"#7fcc19\", \"lime_stained_glass\", \"lime_stained_glass_pane\");\n    setLightColorEx(\"#667f33\", \"green_stained_glass\", \"green_stained_glass_pane\");\n    setLightColorEx(\"#4c7f99\", \"cyan_stained_glass\", \"cyan_stained_glass_pane\");\n    setLightColorEx(\"#6699d8\", \"light_blue_stained_glass\", \"light_blue_stained_glass_pane\");\n    setLightColorEx(\"#334cb2\", \"blue_stained_glass\", \"blue_stained_glass_pane\");\n    setLightColorEx(\"#7f3fb2\", \"purple_stained_glass\", \"purple_stained_glass_pane\");\n    setLightColorEx(\"#b24cd8\", \"magenta_stained_glass\", \"magenta_stained_glass_pane\");\n    setLightColorEx(\"#f27fa5\", \"pink_stained_glass\", \"pink_stained_glass_pane\");\n\n    setLightColorEx(\n        \"#c07047\",\n        \"candle\",\n        \"white_candle\",\n        \"light_gray_candle\",\n        \"gray_candle\",\n        \"black_candle\",\n        \"brown_candle\",\n        \"red_candle\",\n        \"orange_candle\",\n        \"yellow_candle\",\n        \"lime_candle\",\n        \"green_candle\",\n        \"cyan_candle\",\n        \"light_blue_candle\",\n        \"blue_candle\",\n        \"purple_candle\",\n        \"magenta_candle\",\n        \"pink_candle\"\n    );\n}\n", "import type {} from \"./iris\";\nimport { Flipper, defineGloballyIf } from \"./scripts/helpers.ts\";\nimport { configureLightColors } from \"./scripts/lightColorsNull.ts\";\n\nclass Textures {\n    radiance: BuiltTexture;\n    gbufferData: BuiltTexture;\n    skyView: BuiltTexture;\n    exposureHistogram: BuiltTexture;\n    bloomTilesA: BuiltTexture;\n    bloomTilesB: BuiltTexture;\n}\n\nclass Buffers {\n    globalData: BuiltBuffer;\n    skySh: BuiltBuffer;\n    exposure: BuiltBuffer;\n}\n\nclass StreamingBuffers {\n    settings: BuiltStreamingBuffer;\n}\n\nclass StateReferences {\n    bloom: StateReference;\n    autoExposure: StateReference;\n}\n\nlet streamingBuffers = new StreamingBuffers();\nlet stateReferences = new StateReferences();\n\nconst streamedSettingsBufferSize = 64;\nconst globalDataBufferSize = 64;\n\nconst skyViewRes = [192, 108];\nconst exposureHistogramBins = 256;\n\nexport function configureRenderer(renderer: RendererConfig) {\n    renderer.sunPathRotation = 30.0;\n    renderer.ambientOcclusionLevel = 0.0;\n    renderer.mergedHandDepth = false;\n    renderer.disableShade = true;\n\n    renderer.render.sun = false;\n    renderer.render.moon = false;\n    renderer.render.stars = false;\n    renderer.render.horizon = false;\n    renderer.render.clouds = false;\n    renderer.render.vignette = false;\n    renderer.render.waterOverlay = false;\n    renderer.render.entityShadow = false;\n\n    renderer.shadow.resolution = 1024;\n    renderer.shadow.cascades = 4;\n    renderer.shadow.enabled = true;\n\n    if (getBoolSetting(\"pointShadowEnabled\")) {\n        renderer.pointLight.maxCount = getIntSetting(\"pointShadowMaxCount\");\n        renderer.pointLight.resolution = getIntSetting(\"pointShadowResolution\");\n        renderer.pointLight.nearPlane = 0.1;\n        renderer.pointLight.farPlane = 16.0;\n        renderer.pointLight.cacheRealTimeTerrain = true;\n        renderer.pointLight.realTimeCount = 2;\n        renderer.pointLight.maxUpdates = 1;\n        renderer.pointLight.updateThreshold = 0.01;\n    }\n}\n\nexport function configurePipeline(pipeline: PipelineConfig) {\n    configureLightColors();\n\n    let textures = createTextures(pipeline);\n\n    let buffers = createBuffers(pipeline);\n\n    createStateReferences();\n\n    createGlobalMacros();\n\n    createObjectShaders(pipeline, textures, buffers);\n\n    createPreRenderCommands(pipeline.forStage(Stage.PRE_RENDER), textures, buffers);\n\n    createPreTranslucentCommands(pipeline.forStage(Stage.PRE_TRANSLUCENT), textures, buffers);\n\n    createPostRenderCommands(pipeline.forStage(Stage.POST_RENDER), textures, buffers);\n\n    createCombinationPass(pipeline, textures, buffers);\n\n    applyDynamicSettings();\n}\n\nexport function beginFrame() {\n    streamingBuffers.settings.uploadData();\n}\n\nexport function onSettingsChanged() {\n    applyDynamicSettings();\n}\n\nfunction createTextures(pipeline: PipelineConfig): Textures {\n    pipeline\n        .importRawTexture(\"atmosphere_scattering_lut\", \"data/atmosphere_scattering.dat\")\n        .width(32)\n        .height(64)\n        .depth(32)\n        .format(Format.RGB16F)\n        .type(PixelType.HALF_FLOAT)\n        .blur(true)\n        .clamp(true)\n        .load();\n\n    pipeline\n        .importRawTexture(\"tony_mcmapface_lut\", \"data/tony_mcmapface_lut_f16.dat\")\n        .width(48)\n        .height(48)\n        .depth(48)\n        .format(Format.RGB16F)\n        .type(PixelType.HALF_FLOAT)\n        .blur(true)\n        .clamp(true)\n        .load();\n\n    let textures = new Textures();\n\n    textures.radiance = pipeline\n        .createTexture(\"radiance_tex\")\n        .format(Format.R11F_G11F_B10F)\n        .width(screenWidth)\n        .height(screenHeight)\n        .clear(false)\n        .build();\n\n    textures.gbufferData = pipeline\n        .createTexture(\"gbuffer_data_tex\")\n        .format(Format.RGBA32UI)\n        .width(screenWidth)\n        .height(screenHeight)\n        .clear(false)\n        .build();\n\n    textures.skyView = pipeline\n        .createTexture(\"sky_view_tex\")\n        .format(Format.R11F_G11F_B10F)\n        .width(skyViewRes[0])\n        .height(skyViewRes[1])\n        .clear(false)\n        .build();\n\n    textures.bloomTilesA = pipeline\n        .createImageTexture(\"bloom_tiles_tex_a\", \"bloom_tiles_img_a\")\n        .format(Format.R11F_G11F_B10F)\n        .width(screenWidth)\n        .height(screenHeight)\n        .mipmap(true)\n        .clear(false)\n        .build();\n\n    textures.bloomTilesB = pipeline\n        .createImageTexture(\"bloom_tiles_tex_b\", \"bloom_tiles_img_b\")\n        .format(Format.R11F_G11F_B10F)\n        .width(screenWidth)\n        .height(screenHeight)\n        .mipmap(true)\n        .clear(false)\n        .build();\n\n    textures.exposureHistogram = pipeline\n        .createImageTexture(\"exposure_histogram_tex\", \"exposure_histogram_img\")\n        .format(Format.R32UI)\n        .width(exposureHistogramBins)\n        .height(1)\n        .clear(false)\n        .build();\n\n    return textures;\n}\n\nfunction createBuffers(pipeline: PipelineConfig): Buffers {\n    streamingBuffers.settings = pipeline.createStreamingBuffer(streamedSettingsBufferSize);\n\n    let buffers = new Buffers();\n\n    buffers.globalData = pipeline.createBuffer(globalDataBufferSize, false);\n\n    buffers.skySh = pipeline.createBuffer(4 * 4 * 10, false);\n\n    buffers.exposure = pipeline.createBuffer(4 * 2, false);\n\n    return buffers;\n}\n\nfunction createObjectShaders(pipeline: PipelineConfig, textures: Textures, buffers: Buffers) {\n    // Solid\n\n    const solidPrograms: [ProgramUsage, string, string][] = [\n        [Usage.TERRAIN_SOLID, \"terrain_solid\", \"OBJECT_TERRAIN_SOLID\"],\n        [Usage.TERRAIN_CUTOUT, \"terrain_cutout\", \"OBJECT_TERRAIN_CUTOUT\"],\n        [Usage.ENTITY_SOLID, \"entity_solid\", \"OBJECT_ENTITY_SOLID\"],\n        [Usage.ENTITY_CUTOUT, \"entity_cutout\", \"OBJECT_ENTITY_CUTOUT\"],\n        [Usage.BLOCK_ENTITY, \"block_entity\", \"OBJECT_BLOCK_ENTITY\"],\n        [Usage.ENTITY_TRANSLUCENT, \"entity_translucent\", \"OBJECT_ENTITY_TRANSLUCENT\"],\n        [\n            Usage.BLOCK_ENTITY_TRANSLUCENT,\n            \"block_entity_translucent\",\n            \"OBJECT_BLOCK_ENTITY_TRANSLUCENT\",\n        ],\n        [Usage.PARTICLES, \"particles\", \"OBJECT_PARTICLES\"],\n        [Usage.HAND, \"hand\", \"OBJECT_HAND\"],\n        [Usage.EMISSIVE, \"emissive\", \"OBJECT_EMISSIVE\"],\n        [Usage.BASIC, \"basic\", \"OBJECT_BASIC\"],\n        [Usage.LINES, \"lines\", \"OBJECT_LINES\"],\n    ];\n\n    for (const [usage, name, macro] of solidPrograms) {\n        pipeline\n            .createObjectShader(name, usage)\n            .vertex(\"programs/object/all_solid.vsh\")\n            .fragment(\"programs/object/all_solid.fsh\")\n            .target(0, textures.gbufferData)\n            .define(macro, \"1\")\n            .compile();\n    }\n\n    // Translucent\n\n    const translucentPrograms: [ProgramUsage, string, string][] = [\n        [Usage.TERRAIN_TRANSLUCENT, \"terrain_translucent\", \"OBJECT_TERRAIN_TRANSLUCENT\"],\n        [Usage.PARTICLES_TRANSLUCENT, \"particles_translucent\", \"OBJECT_PARTICLES_TRANSLUCENT\"],\n        [Usage.TRANSLUCENT_HAND, \"translucent_hand\", \"OBJECT_TRANSLUCENT_HAND\"],\n        [Usage.TEXTURED, \"textured\", \"OBJECT_TEXTURED\"],\n        [Usage.TEXT, \"text\", \"OBJECT_TEXT\"],\n    ];\n\n    for (const [usage, name, macro] of translucentPrograms) {\n        pipeline\n            .createObjectShader(name, usage)\n            .vertex(\"programs/object/all_translucent.vsh\")\n            .fragment(\"programs/object/all_translucent.fsh\")\n            .target(0, textures.radiance)\n            .ubo(0, buffers.globalData)\n            .define(macro, \"1\")\n            .compile();\n    }\n\n    // Shadow\n\n    pipeline\n        .createObjectShader(\"shadow\", Usage.SHADOW)\n        .vertex(\"programs/object/shadow.vsh\")\n        .fragment(\"programs/object/shadow.fsh\")\n        .compile();\n\n    if (getBoolSetting(\"pointShadowEnabled\")) {\n        pipeline\n            .createObjectShader(\"shadow_point\", Usage.POINT)\n            .vertex(\"programs/object/shadow_point.vsh\")\n            .fragment(\"programs/object/shadow_point.fsh\")\n            .compile();\n    }\n}\n\nfunction createPreRenderCommands(commands: CommandList, textures: Textures, buffers: Buffers) {\n    commands\n        .createCompute(\"fill_global_data_buffer\")\n        .location(\"programs/pre_render/fill_global_data_buffer.csh\")\n        .workGroups(1, 1, 1)\n        .ssbo(0, buffers.globalData)\n        .compile();\n\n    commands.barrier(SSBO_BIT | UBO_BIT);\n\n    commands\n        .createComposite(\"render_sky_view\")\n        .vertex(\"programs/composite.vsh\")\n        .fragment(\"programs/pre_render/render_sky_view.fsh\")\n        .target(0, textures.skyView)\n        .ubo(0, buffers.globalData)\n        .compile();\n\n    commands\n        .createCompute(\"gen_sky_sh\")\n        .location(\"programs/pre_render/gen_sky_sh.csh\")\n        .workGroups(1, 1, 1)\n        .ssbo(0, buffers.skySh)\n        .compile();\n\n    commands.barrier(SSBO_BIT | UBO_BIT);\n\n    commands.end();\n}\n\nfunction createPreTranslucentCommands(commands: CommandList, textures: Textures, buffers: Buffers) {\n    commands\n        .createComposite(\"deferred_shading\")\n        .vertex(\"programs/composite.vsh\")\n        .fragment(\"programs/pre_translucent/deferred_shading.fsh\")\n        .target(0, textures.radiance)\n        .ubo(0, buffers.globalData)\n        .ubo(1, buffers.skySh)\n        .compile();\n\n    commands.end();\n}\n\nfunction createPostRenderCommands(commands: CommandList, textures: Textures, buffers: Buffers) {\n    createBloomCommands(commands.subList(\"Bloom\"), textures, textures.radiance);\n    createExposureCommands(commands.subList(\"Auto Exposure\"), textures, buffers);\n\n    commands.end();\n}\n\nfunction createExposureCommands(commands: CommandList, textures: Textures, buffers: Buffers) {\n    commands\n        .createCompute(\"clear_histogram\")\n        .location(\"programs/post_render/exposure/clear_histogram.csh\")\n        .workGroups(1, 1, 1)\n        .state(stateReferences.autoExposure)\n        .compile();\n\n    commands.barrier(IMAGE_BIT | FETCH_BIT);\n\n    commands\n        .createCompute(\"build_histogram\")\n        .location(\"programs/post_render/exposure/build_histogram.csh\")\n        .workGroups(Math.ceil(screenWidth / 32), Math.ceil(screenHeight / 32), 1)\n        .state(stateReferences.autoExposure)\n        .compile();\n\n    commands.barrier(IMAGE_BIT | FETCH_BIT);\n\n    commands\n        .createCompute(\"calculate_exposure\")\n        .location(\"programs/post_render/exposure/calculate_exposure.csh\")\n        .workGroups(1, 1, 1)\n        .ssbo(0, buffers.exposure)\n        .state(stateReferences.autoExposure)\n        .compile();\n\n    commands.barrier(SSBO_BIT | UBO_BIT);\n\n    commands.end();\n}\n\nfunction createBloomCommands(\n    commands: CommandList, \n    textures: Textures, \n    sourceTexture: BuiltTexture\n) {\n    const tileCount = getIntSetting(\"bloomTileCount\");\n    let textureFlipper = new Flipper(textures.bloomTilesA, textures.bloomTilesB); \n\n    // Downsampling\n\n    let downsampling = commands.subList(\"Downsampling\");\n\n    for (let dstLod = 1; dstLod < tileCount; dstLod++) {\n        // Read from sourceTexture for lod 0 (avoid initial copy)\n        let srcLod = dstLod - 1;\n        let srcTex = srcLod == 0 ? sourceTexture : textureFlipper.front();\n\n        downsampling\n            .createComposite(`downsample ${dstLod}`)\n            .vertex(\"programs/composite.vsh\")\n            .fragment(\"programs/post_render/bloom/downsample.fsh\")\n            .target(0, textureFlipper.front(), dstLod)\n            .define(\"SRC_TEX\", srcTex.name())\n            .define(\"SRC_LOD\", srcLod.toString())\n            .define(\"DST_LOD\", dstLod.toString())\n            .state(stateReferences.bloom)\n            .compile();\n    }\n\n    downsampling.end();\n\n    // Blur\n\n    let blur = commands.subList(\"Blur\");\n\n    const useComputeBlur = true;\n    const workGroupSize = 64;\n\n    for (let lod = 0; lod < tileCount; lod++) {\n        // Read from sourceTexture for lod 0 (avoid initial copy)\n        let tex = lod == 0 ? sourceTexture : textureFlipper.front();\n        let mipSuffix = lod == 0 ? \"\" : `_mip${lod}`;\n\n        if (useComputeBlur) {\n            commands.createCompute(`blur ${lod} horizontal (compute)`)\n                .location(\"programs/post_render/bloom/blur_h.csh\")\n                .workGroups(\n                    Math.ceil(screenWidth / workGroupSize),\n                    screenHeight,\n                    1\n                )\n                .define(\"WORK_GROUP_SIZE\", workGroupSize.toString())\n                .define(\"DST_IMG\", textureFlipper.back().imageName() + mipSuffix)\n                .define(\"SRC_TEX\", textureFlipper.front().name())\n                .define(\"SRC_LOD\", lod.toString())\n                .compile();\n\n            commands.barrier(IMAGE_BIT | FETCH_BIT);\n\n            textureFlipper.flip();\n\n            commands.createCompute(`blur ${lod} vertical (compute)`)\n                .location(\"programs/post_render/bloom/blur_v.csh\")\n                .workGroups(\n                    Math.ceil(screenWidth / workGroupSize),\n                    screenHeight,\n                    1\n                )\n                .define(\"WORK_GROUP_SIZE\", workGroupSize.toString())\n                .define(\"DST_IMG\", textureFlipper.back().imageName())\n                .define(\"SRC_TEX\", textureFlipper.front().name())\n                .define(\"SRC_LOD\", lod.toString())\n                .compile();\n\n            commands.barrier(IMAGE_BIT | FETCH_BIT);\n\n            textureFlipper.flip();\n        } else {\n            // Horizontal\n            blur.createComposite(`blur ${lod} horizontal (fragment)`)\n                .vertex(\"programs/composite.vsh\")\n                .fragment(\"programs/post_render/bloom/blur.fsh\")\n                .target(0, textureFlipper.back(), lod)\n                .define(\"SRC_TEX\", tex.name())\n                .define(\"SRC_LOD\", lod.toString())\n                .state(stateReferences.bloom)\n                .compile();\n\n            textureFlipper.flip();\n\n            // Vertical\n            blur.createComposite(`blur ${lod} vertical (fragment)`)\n                .vertex(\"programs/composite.vsh\")\n                .fragment(\"programs/post_render/bloom/blur.fsh\")\n                .target(0, textureFlipper.back(), lod)\n                .define(\"BLUR_VERTICAL\", \"\")\n                .define(\"SRC_TEX\", textureFlipper.front().name())\n                .define(\"SRC_LOD\", lod.toString())\n                .state(stateReferences.bloom)\n                .compile();\n\n            textureFlipper.flip();\n        }\n    }\n\n    blur.end();\n\n    // Upsampling \n    // Final upsample from 1 to 0 is performed in the program where bloom is applied (save unneeded write)\n\n    let upsampling = commands.subList(\"Upsampling\");\n\n    for (let dstLod = tileCount - 2; dstLod >= 1; dstLod--) {\n        let srcLod = dstLod + 1;\n\n        upsampling\n            .createComposite(`upsample ${dstLod}`)\n            .vertex(\"programs/composite.vsh\")\n            .fragment(\"programs/post_render/bloom/upsample.fsh\")\n            .target(0, textureFlipper.back(), dstLod)\n            .define(\"SRC_TEX\", textureFlipper.front().name())\n            .define(\"SRC_LOD\", srcLod.toString())\n            .define(\"DST_LOD\", dstLod.toString())\n            .state(stateReferences.bloom)\n            .compile();\n\n        textureFlipper.flip();\n    }\n\n    upsampling.end();\n\n    commands.end();\n\n    /*\n    // blur with compute\n    //*/\n}\n\nfunction createCombinationPass(pipeline: PipelineConfig, textures: Textures, buffers: Buffers) {\n    pipeline\n        .createCombinationPass(\"programs/combination.fsh\")\n        .ubo(0, streamingBuffers.settings)\n        .ubo(1, buffers.exposure)\n        .compile();\n}\n\nfunction applyDynamicSettings() {\n    // State references\n\n    stateReferences.bloom.setEnabled(getBoolSetting(\"bloomEnabled\"));\n    stateReferences.autoExposure.setEnabled(getBoolSetting(\"autoExposureEnabled\"));\n\n    // Streamed settings\n\n    streamingBuffers.settings.setBool(0, getBoolSetting(\"bloomEnabled\"));\n    streamingBuffers.settings.setFloat(4, getFloatSetting(\"bloomIntensity\"));\n    streamingBuffers.settings.setBool(8, getBoolSetting(\"autoExposureEnabled\"));\n    streamingBuffers.settings.setFloat(12, getFloatSetting(\"manualExposureValue\"));\n}\n\nfunction createGlobalMacros() {\n    defineGlobally(\"TEXTURE_FORMAT\", \"TEXTURE_FORMAT_LAB\");\n    defineGlobally(\"HISTOGRAM_BINS\", exposureHistogramBins);\n\n    defineGloballyIf(\"USE_NORMAL_MAP\", 1, getBoolSetting(\"normalMapEnabled\"));\n    defineGloballyIf(\"USE_SPECULAR_MAP\", 1, getBoolSetting(\"specularMapEnabled\"));\n    defineGloballyIf(\"POINT_SHADOW\", 1, getBoolSetting(\"pointShadowEnabled\"));\n    defineGlobally(\"BLOOM_TILES\", getIntSetting(\"bloomTileCount\"));\n}\n\nfunction createStateReferences() {\n    stateReferences.bloom = new StateReference();\n    stateReferences.autoExposure = new StateReference();\n}\n"],
  "mappings": "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",
  "names": []
}
