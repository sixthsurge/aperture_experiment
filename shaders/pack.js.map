{
  "version": 3,
  "sources": ["pack.ts"],
  "sourcesContent": ["import type {} from './iris'\n\nconst globalDataBufferSize = 64; \n\nexport function setupShader(dimension : NamespacedId) {\n    //enableShadows(1592, 4);\n\n    // ------------------\n    //   World Settings\n    // ------------------\n\n    worldSettings.disableShade          = true;\n    worldSettings.ambientOcclusionLevel = 0.0;\n    worldSettings.sunPathRotation       = 30.0;\n    worldSettings.shadowFarPlane        = 120;\n    worldSettings.shadowMapDistance     = 120;\n    worldSettings.renderSun             = false;\n    worldSettings.renderMoon            = false;\n    worldSettings.renderWaterOverlay    = false;\n\n    // ------------\n    //   Textures\n    // ------------\n\n    new RawTexture(\"atmosphere_scattering_lut\", \"data/atmosphere_scattering.dat\")\n      .width(32)\n      .height(64)\n      .depth(32)\n      .format(Format.RGB16F)\n      .type(PixelType.HALF_FLOAT)\n      .blur(true)\n      .build();\n\n    new RawTexture(\"tony_mcmapface_lut\", \"data/tony_mcmapface_lut_f16.dat\")\n      .width(48)\n      .height(48)\n      .depth(48)\n      .format(Format.RGB16F)\n      .type(PixelType.HALF_FLOAT)\n      .blur(true)\n      .build();\n\n    let radianceTex = new Texture(\"radiance_tex\")\n        .format(Format.RGB16F)\n        .width(screenWidth)\n        .height(screenHeight)\n        .build();\n\n    let gbufferDataTex = new Texture(\"gbuffer_data_tex\")\n        .format(Format.RGBA16)\n        .width(screenWidth)\n        .height(screenHeight)\n        .build();\n\n    // -----------\n    //   Buffers\n    // -----------\n\n    let globalDataBuffer = new GPUBuffer(globalDataBufferSize).build();\n\n    // ----------\n    //   Passes\n    // ----------\n\n    registerShader(\n        new ObjectShader(\"textured\", Usage.TEXTURED)\n          .vertex(\"passes/object/all_solid.vsh\")\n          .fragment(\"passes/object/all_solid.fsh\")\n          .target(0, gbufferDataTex)\n          .build()\n    );\n\n    registerShader(\n      Stage.PRE_TRANSLUCENT,\n      new Compute(\"fill_global_data_buffer\")\n        .location(\"passes/compute/fill_global_data_buffer.csh\")\n        .workGroups(1, 1, 1)\n        .ssbo(0, globalDataBuffer)\n        .build()\n    );\n\n    registerShader(\n        Stage.PRE_TRANSLUCENT,\n        new Composite(\"deferred_shading\")\n          .vertex(\"passes/composite.vsh\")\n          .fragment(\"passes/composite/deferred_shading.fsh\")\n          .target(0, radianceTex)\n          .ubo(0, globalDataBuffer)\n          .build()\n    );\n\n    setCombinationPass(new CombinationPass(\"passes/combination.fsh\").build());\n}\n"],
  "mappings": ";AAEA,IAAM,uBAAuB;AAEtB,SAAS,YAAY,WAA0B;AAOlD,gBAAc,eAAwB;AACtC,gBAAc,wBAAwB;AACtC,gBAAc,kBAAwB;AACtC,gBAAc,iBAAwB;AACtC,gBAAc,oBAAwB;AACtC,gBAAc,YAAwB;AACtC,gBAAc,aAAwB;AACtC,gBAAc,qBAAwB;AAMtC,MAAI,WAAW,6BAA6B,gCAAgC,EACzE,MAAM,EAAE,EACR,OAAO,EAAE,EACT,MAAM,EAAE,EACR,OAAO,OAAO,MAAM,EACpB,KAAK,UAAU,UAAU,EACzB,KAAK,IAAI,EACT,MAAM;AAET,MAAI,WAAW,sBAAsB,iCAAiC,EACnE,MAAM,EAAE,EACR,OAAO,EAAE,EACT,MAAM,EAAE,EACR,OAAO,OAAO,MAAM,EACpB,KAAK,UAAU,UAAU,EACzB,KAAK,IAAI,EACT,MAAM;AAET,MAAI,cAAc,IAAI,QAAQ,cAAc,EACvC,OAAO,OAAO,MAAM,EACpB,MAAM,WAAW,EACjB,OAAO,YAAY,EACnB,MAAM;AAEX,MAAI,iBAAiB,IAAI,QAAQ,kBAAkB,EAC9C,OAAO,OAAO,MAAM,EACpB,MAAM,WAAW,EACjB,OAAO,YAAY,EACnB,MAAM;AAMX,MAAI,mBAAmB,IAAI,UAAU,oBAAoB,EAAE,MAAM;AAMjE;AAAA,IACI,IAAI,aAAa,YAAY,MAAM,QAAQ,EACxC,OAAO,6BAA6B,EACpC,SAAS,6BAA6B,EACtC,OAAO,GAAG,cAAc,EACxB,MAAM;AAAA,EACb;AAEA;AAAA,IACE,MAAM;AAAA,IACN,IAAI,QAAQ,yBAAyB,EAClC,SAAS,4CAA4C,EACrD,WAAW,GAAG,GAAG,CAAC,EAClB,KAAK,GAAG,gBAAgB,EACxB,MAAM;AAAA,EACX;AAEA;AAAA,IACI,MAAM;AAAA,IACN,IAAI,UAAU,kBAAkB,EAC7B,OAAO,sBAAsB,EAC7B,SAAS,uCAAuC,EAChD,OAAO,GAAG,WAAW,EACrB,IAAI,GAAG,gBAAgB,EACvB,MAAM;AAAA,EACb;AAEA,qBAAmB,IAAI,gBAAgB,wBAAwB,EAAE,MAAM,CAAC;AAC5E;",
  "names": []
}
